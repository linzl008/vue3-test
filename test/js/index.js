{ parent:
{ parent: undefined,
  store:
   {
  'mode' => 'production',
    'context' => 'D:\\front\\person\\test\\vue3\\vue3-test',
    'devtool' => false },
  devServer:
  { parent: [Circular],
    store:  {},
    allowedHosts: [Object],
      shorthands: [Array],
    after: "[Function]",
    before: "[Function]",
    bonjour: "[Function]",
    clientLogLevel: "[Function]",
    color: "[Function]",
    compress: "[Function]",
    contentBase: "[Function]",
    disableHostCheck: "[Function]",
    filename: "[Function]",
    headers: "[Function]",
    historyApiFallback: "[Function]",
    host: "[Function]",
    hot: "[Function]",
    hotOnly: [Function],
    http2: "[Function]",
    https: "[Function]",
    index: "[Function]",
    info: "[Function]",
    inline: "[Function]",
    lazy: "[Function]",
    mimeTypes: "[Function]",
    noInfo: "[Function]",
    open: "[Function]",
    openPage: "[Function]",
    overlay: "[Function]",
    pfx: "[Function]",
    pfxPassphrase: "[Function]",
    port: "[Function]",
    proxy: "[Function]",
    progress: "[Function]",
    public: "[Function]",
    publicPath: "[Function]",
    quiet: "[Function]",
    setup: "[Function]",
    socket: "[Function]",
    sockHost: "[Function]",
    sockPath: "[Function]",
    sockPort: "[Function]",
    staticOptions: "[Function]",
    stats: "[Function]",
    stdin: "[Function]",
    useLocalIp: "[Function]",
    watchContentBase: "[Function]",
    watchOptions: "[Function]",
    writeToDisk: "[Function]" },
  entryPoints: { parent: [Circular], store: [] },
  module: [Circular],
    node: { parent: [Circular], store: [] },
  optimization:
  { parent: [Circular],
    store: [],
    minimizers: [Object],
    shorthands: [Array],
    concatenateModules: "[Function]",
    flagIncludedChunks: "[Function]",
    mergeDuplicateChunks: "[Function]",
    minimize: "[Function]",
    namedChunks: "[Function]",
    namedModules: "[Function]",
    nodeEnv: "[Function]",
    noEmitOnErrors: "[Function]",
    occurrenceOrder: "[Function]",
    portableRecords: "[Function]",
    providedExports: "[Function]",
    removeAvailableModules: "[Function]",
    removeEmptyChunks: "[Function]",
    runtimeChunk: "[Function]",
    sideEffects: "[Function]",
    splitChunks: "[Function]",
    usedExports: "[Function]" },
  output:
  { parent: [Circular],
    store: [],
    shorthands: [Array],
    auxiliaryComment: "[Function]",
    chunkCallbackName: "[Function]",
    chunkFilename: "[Function]",
    chunkLoadTimeout: "[Function]",
    crossOriginLoading: "[Function]",
    devtoolFallbackModuleFilenameTemplate: "[Function]",
    devtoolLineToLine: "[Function]",
    devtoolModuleFilenameTemplate: "[Function]",
    devtoolNamespace: "[Function]",
    filename: "[Function]",
    futureEmitAssets: "[Function]",
    globalObject: "[Function]",
    hashDigest: "[Function]",
    hashDigestLength: "[Function]",
    hashFunction: "[Function]",
    hashSalt: "[Function]",
    hotUpdateChunkFilename: "[Function]",
    hotUpdateFunction: "[Function]",
    hotUpdateMainFilename: "[Function]",
    jsonpFunction: "[Function]",
    library: "[Function]",
    libraryExport: "[Function]",
    libraryTarget: "[Function]",
    path: "[Function]",
    pathinfo: "[Function]",
    publicPath: "[Function]",
    sourceFilename: "[Function]",
    sourcePrefix: "[Function]",
    strictModuleExceptionHandling: "[Function]",
    umdNamedDefine: "[Function]",
    webassemblyModuleFilename: "[Function]" },
  performance:
  { parent: [Circular],
    store:  {},
    shorthands: [Array],
      assetFilter: "[Function]",
    hints: "[Function]",
    maxAssetSize: "[Function]",
    maxEntrypointSize: "[Function]" },
  plugins: { parent: [Circular], store: [] },
  resolve:
  { parent: [Circular],
    store:  {},
    alias: [Object],
      aliasFields: [Object],
    descriptionFiles: [Object],
    extensions: [Object],
    mainFields: [Object],
    mainFiles: [Object],
    modules: [Object],
    plugins: [Object],
    shorthands: [Array],
    cachePredicate: "[Function]",
    cacheWithContext: "[Function]",
    concord: "[Function]",
    enforceExtension: "[Function]",
    enforceModuleExtension: "[Function]",
    symlinks: "[Function]",
    unsafeCache: "[Function]" },
  resolveLoader:
  { parent: [Circular],
    store:  {},
    alias: [Object],
      aliasFields: [Object],
    descriptionFiles: [Object],
    extensions: [Object],
    mainFields: [Object],
    mainFiles: [Object],
    modules: [Object],
    plugins: [Object],
    shorthands: [Array],
    cachePredicate: "[Function]",
    cacheWithContext: "[Function]",
    concord: "[Function]",
    enforceExtension: "[Function]",
    enforceModuleExtension: "[Function]",
    symlinks: "[Function]",
    unsafeCache: "[Function]",
    moduleExtensions: [Object],
    packageMains: [Object] },
  shorthands:
    [ 'amd',
      'bail',
      'cache',
      'context',
      'devtool',
      'externals',
      'loader',
      'mode',
      'name',
      'parallelism',
      'profile',
      'recordsInputPath',
      'recordsPath',
      'recordsOutputPath',
      'stats',
      'target',
      'watch',
      'watchOptions' ],
      amd: "[Function]",
  bail: "[Function]",
  cache: "[Function]",
  context: "[Function]",
  devtool: "[Function]",
  externals: "[Function]",
  loader: "[Function]",
  mode: "[Function]",
  name: "[Function]",
  parallelism: "[Function]",
  profile: "[Function]",
  recordsInputPath: "[Function]",
  recordsPath: "[Function]",
  recordsOutputPath: "[Function]",
  stats: "[Function]",
  target: "[Function]",
  watch: "[Function]",
  watchOptions: "[Function]" },
  store:
     { 'noParse' => /^(vue|vue-router|vuex|vuex-router-sync)$/ },
  rules:
  { parent: [Circular],
    store:
     {
    'vue' => [Object],
      'images' => [Object],
      'svg' => [Object],
      'media' => [Object],
      'fonts' => [Object],
      'pug' => [Object],
      'css' => [Object],
      'postcss' => [Object],
      'scss' => [Object],
      'sass' => [Object],
      'less' => [Object],
      'stylus' => [Object],
      'js' => [Object],
      'ts' => [Object],
      'tsx' => [Object] } },
  defaultRules: { parent: [Circular], store:  {} },
  shorthands: [ 'noParse', 'strictExportPresence' ],
    noParse: "[Function]",
  strictExportPresence: "[Function]" }
